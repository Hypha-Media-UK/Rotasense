generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model buildings {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime
  departments departments[]
}

model daily_overrides {
  id           Int                          @id @default(autoincrement())
  date         DateTime                     @db.Date
  staffId      Int
  departmentId Int?
  serviceId    Int?
  overrideType daily_overrides_overrideType
  startTime    String?
  endTime      String?
  reason       String?
  createdAt    DateTime                     @default(now())
  updatedAt    DateTime
  departments  departments?                 @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  services     services?                    @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  staff        staff                        @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@index([departmentId], map: "daily_overrides_departmentId_fkey")
  @@index([serviceId], map: "daily_overrides_serviceId_fkey")
  @@index([staffId], map: "daily_overrides_staffId_fkey")
}

model departments {
  id                Int                 @id @default(autoincrement())
  name              String
  buildingId        Int
  operationalDays   String
  startTime         String
  endTime           String
  minStaff          Int                 @default(1)
  displayOnHome     Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  is24x7            Boolean             @default(false)
  daily_overrides   daily_overrides[]
  buildings         buildings           @relation(fields: [buildingId], references: [id], onDelete: Cascade)
  staff_allocations staff_allocations[]

  @@unique([name, buildingId])
  @@index([buildingId], map: "departments_buildingId_fkey")
}

model services {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  operationalDays   String
  startTime         String
  endTime           String
  minStaff          Int                 @default(1)
  displayOnHome     Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  is24x7            Boolean             @default(false)
  daily_overrides   daily_overrides[]
  staff_allocations staff_allocations[]
}

model settings {
  id             Int      @id @default(autoincrement())
  timeFormat     String   @default("24")
  createdAt      DateTime @default(now())
  updatedAt      DateTime
  zeroStartDates String   @default("[]")
}

model staff {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  category          staff_category      @default(REGULAR)
  defaultStartTime  String              @default("08:00")
  defaultEndTime    String              @default("20:00")
  contractedDays    String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime
  daysOff           Int?
  daysOn            Int?
  scheduleType      staff_scheduleType  @default(DAILY)
  shiftOffset       Int?
  zeroStartDateId   String?
  daily_overrides   daily_overrides[]
  staff_allocations staff_allocations[]
}

model staff_allocations {
  id           Int          @id @default(autoincrement())
  staffId      Int
  departmentId Int?
  serviceId    Int?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime
  departments  departments? @relation(fields: [departmentId], references: [id], onDelete: Cascade)
  services     services?    @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  staff        staff        @relation(fields: [staffId], references: [id], onDelete: Cascade)

  @@index([departmentId], map: "staff_allocations_departmentId_fkey")
  @@index([serviceId], map: "staff_allocations_serviceId_fkey")
  @@index([staffId], map: "staff_allocations_staffId_fkey")
}

enum staff_category {
  REGULAR
  RELIEF
  SUPERVISOR
}

enum daily_overrides_overrideType {
  TEMPORARY_ALLOCATION
  ABSENCE
}

enum staff_scheduleType {
  DAILY
  SHIFT_CYCLE
}
